{"ast":null,"code":"var _jsxFileName = \"C:\\\\FrontEndExcercises\\\\06.react\\\\React_The Complete Guide\\\\complete-guide\\\\src\\\\19.SPA Using React Router\\\\main project\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport React, { Suspense } from \"react\";\nimport { useRouteLoaderData, json, redirect, defer, Await } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function loadEvent(id, request) {\n  const resp = await fetch('http://localhost:8080/events/' + id, {\n    method: request.method\n  });\n  if (!resp.ok) {\n    throw json({\n      message: \"Could not fetch details for selected event.\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await resp.json();\n    return resData.event;\n  }\n}\nconst loader = async ({\n  request,\n  params\n}) => {\n  const id = params.eventId;\n  return defer({\n    event: loadEvent(id, request),\n    events: loadEvents()\n  });\n};\nconst EventDetailPage = () => {\n  _s();\n  const {\n    event,\n    events\n  } = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 29\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: event,\n        children: loadedEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n          event: loadedEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 29\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: events,\n        children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(EventDetailPage, \"OA7jEBfO3UI1aCR8ByPCigEHUtE=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n};\nconst action = async ({\n  params\n}) => {\n  const eventId = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events\" + eventId);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not delete selected event.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return redirect('/events');\n  }\n};\nexport default EventDetailPage;\nexport { loader };\nexport { action };\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["React","Suspense","useRouteLoaderData","json","redirect","defer","Await","EventItem","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","loadEvent","id","request","resp","fetch","method","ok","message","status","resData","event","loader","params","eventId","events","loadEvents","EventDetailPage","_s","children","fallback","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvent","loadedEvents","_c","response","action","$RefreshReg$"],"sources":["C:/FrontEndExcercises/06.react/React_The Complete Guide/complete-guide/src/19.SPA Using React Router/main project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import React, {Suspense} from \"react\";\r\nimport {useRouteLoaderData, json, redirect, defer, Await} from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nasync function loadEvent(id, request){\r\n    const resp = await fetch('http://localhost:8080/events/'+id, {method: request.method, })\r\n    if (!resp.ok){\r\n        throw json({message: \"Could not fetch details for selected event.\"}, { status: 500})\r\n    }else{\r\n        const resData = await resp.json();\r\n        return resData.event;\r\n    }\r\n}\r\nconst loader = async ({request, params}) => {\r\n    const id = params.eventId\r\n    return defer({\r\n        event: loadEvent(id, request),\r\n        events: loadEvents()\r\n    });\r\n}\r\nconst EventDetailPage = () => {\r\n    const {event, events} = useRouteLoaderData(\"event-detail\");\r\n    return <>\r\n        <Suspense fallback={<p style={{textAlign: \"center\"}}>Loading...</p>}>\r\n            <Await resolve={event}>\r\n                {loadedEvent => <EventItem event={loadedEvent}/> }\r\n            </Await>\r\n        </Suspense>\r\n        <Suspense fallback={<p style={{textAlign: \"center\"}}>Loading...</p>}>\r\n            <Await resolve={events}>\r\n                {loadedEvents => <EventsList events={loadedEvents}/>}\r\n            </Await>\r\n        </Suspense>\r\n\r\n\r\n\r\n    </>\r\n}\r\n\r\nconst loadEvents = async() => {\r\n    const response = await fetch('http://localhost:8080/events');\r\n    if (!response.ok) {\r\n        throw json({message: \"Could not fetch events.\"}, { status: 500})\r\n    } else {\r\n        const resData = await response.json();\r\n        return resData.events\r\n    }\r\n}\r\n\r\n\r\nconst action = async ({params}) => {\r\n    const eventId = params.eventId;\r\n    const response = await fetch(\"http://localhost:8080/events\"+ eventId);\r\n    if (!response.ok){\r\n        throw json({message:\"Could not delete selected event.\"}, {status: 500})\r\n    }else{\r\n        return redirect('/events');\r\n    }\r\n}\r\nexport default EventDetailPage;\r\nexport {loader} ;\r\nexport {action}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}